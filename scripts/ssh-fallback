#!/usr/bin/env bash
#
# ssh-fallback — try every key in ~/.ssh, non-interactively, until one works.

set -euo pipefail

# 1) Gather all private keys under ~/.ssh
mapfile -t keys < <(
  find "$HOME/.ssh" -maxdepth 1 -type f \
    -name 'id_*' ! -name '*.pub' \
    -perm /u=r | sort
)

if (( ${#keys[@]} == 0 )); then
  echo "No SSH keys in ~/.ssh (id_* excluding .pub)" >&2
  exit 1
fi

last_output="" 
last_status=0

for key in "${keys[@]}"; do
  echo "→ Trying key: $(basename "$key")" >&2

  # 2) Capture raw output + exit code
  raw_output=$(ssh \
    -i "$key" \
    -o IdentitiesOnly=yes \
    -o BatchMode=yes \
    -o ConnectTimeout=5 \
    "$@" 2>&1) || status=$?

  # 3) Strip any NULs so Bash won’t complain
  output=${raw_output//[$'\x00']/}

  # 4) If SSH-level failure (couldn't negotiate key), try next
  if [[ ${status:-0} -eq 255 ]]; then
    last_output="$output"; last_status=$status
    continue
  fi

  # 5) If GitHub says “Permission to … denied”, try next
  if grep -q "^Permission to .\+ denied" <<<"$output"; then
    last_output="$output"; last_status=$status
    continue
  fi

  # 6) Otherwise, success (or another error) — print & exit
  echo "$output" >&2
  exit $status
done

# 7) All keys failed → replay last error
echo "$last_output" >&2
exit $last_status

